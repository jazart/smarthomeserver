type Query {
    user(name: String!): ParentUser!
    device: Device!
}

type Mutation {
    signup(name: String, pass: String): String
    update(uId: String, deviceName: String, command: Command): String
    addChild(name: String, pass: String, parentName: String): String
}

interface User {
    id: Long!
    name: String!
    password: String!
}

type ParentUser implements User {
    name: String!
    id: Long!
    family: [ChildUser]
    devices: [Device]
    password: String!
}

type ChildUser implements User {
    name: String!
    id: Long!
    parent: ParentUser!
    password: String!
}



type Device {
    id: String!
    status: Status!
    name: String!
    commands: [Command]!
}


enum Status {
    CONNECTED
    DISCONNECTED
}

enum Command {
    TURN_OFF
    TURN_ON
    PULSE
}
