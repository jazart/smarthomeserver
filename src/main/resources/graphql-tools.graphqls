#Schema that defines objects and operations that a client can use to interact with the API. For more info see: https://graphql.org/

type Query {
    user(name: String!): ParentUser
    childUser(username: String!): ChildUser
    device(type: DeviceType): Device!
}

type Mutation {
    signup(creds: Credential!, info: Personal): String
    login(name: String!, pass: String!): String
    sendCommand(deviceInfo: DeviceInfo!, deviceType: DeviceType!, command: Command!): Command
    startStreamCommand(deviceInfo: DeviceInfo!, command: Command!): String
    addChild(creds: Credential, info: Personal, parentName: String): String
    addDevice(deviceInfo: DeviceInfo!, type: DeviceType!): String
    removeDevice(deviceInfo: DeviceInfo!): String
    batchRemoveDevices(username: String!, devices: [String]!): [String]
    addFavorite(deviceInfo: DeviceInfo!): String
    removeFavorite(deviceInfo: DeviceInfo!): String
    modifyDeviceName(deviceInfo: DeviceInfo!, newName: String!): String
}

interface User {
    username: String!
    firstName: String!
    lastName: String!
}

type ParentUser implements User {
    username: String!
    firstName: String!
    lastName: String!
    family: [ChildUser]
    devices: [Device]
}

type ChildUser implements User {
    username: String!
    firstName: String!
    lastName: String!
    parent: String!
}

type Device {
    name: String!
    status: Status!
    owner: String!
    commands: [Command]
    isFavorite: Boolean!
    type: DeviceType!
}

enum Status {
    CONNECTED
    DISCONNECTED
}

enum Command {
    TURN_OFF
    TURN_ON
    PULSE
    STREAM
    SNAP
}

enum DeviceType {
    CAMERA,
    LIGHT,
    TV,
    HOME_TEMPERATURE,
    MOTION,
    BLUETOOTH_DEVICE
}

input Credential {
    username: String!
    password: String!
}

input Personal {
    firstName: String!
    lastName: String!
    email: String!
}

input DeviceInfo {
    username: String!
    deviceName: String!
    isFavorite: Boolean
    command: [Command]
    type: DeviceType!
}